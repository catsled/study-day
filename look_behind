  现在来学习一下 (?=...)

  这个模式其实是一种以判断后面匹配字符串,来匹配前面的字符串,(\w+(?=...)),如果前面的匹配成功
  但是后面(?=)没有匹配成功，那么前面的也是会匹配失败的.

---------------------------------------------------------------------------------
  例:

  pattern = re.compile(r'\w+(?=,)')

  match = re.findall(pattern,'Hello,World,My name is Peter')

  IN：match
  OUT:['Hello','World']

  pattern = re.compile(r'\w+(?=\.)')

  match = re.findall(pattern,'Hello,World,My name is Peter')

  IN:match
  OUT:['Peter']

  pattern = re.compile(r'\w+(?=,|\.)')

  match = re.findall(pattern,'Hello,my name is Peter,I like eating fish.')

  IN:match
  OUT:['Hello','Peter','fish']


  同样的这个模式是不捕获(?=)所匹配的内容的,他只是查看是否匹配.

------------------------------------------------------------------------------------
 有了匹配成功检测，那一定有匹配失败检测:(?!)

 例:

 pattern = re.compile(r'Tom(?!Jack)')

 match = re.findall(pattern,"My name is Tom Steve,and My father's name is Tom Jack.")

 IN:match
 OUT:['Tom']

 pattern = re.compile(r'Tom(?!,)')

 match = re.findall(pattern,"My name is Tom,and my father's name is Tom.")

 IN:match
 OUT:['Tom']

 这个模式依然是非捕获的.
 ---------------------------------------------------------------------------------
 现在有一道题:如何将 1234567890 转换为标准格式(1,234,567,890)

 首先来分析一下这个格式,除了第一个数字外，其余的都是每三个一组,第二组后面也都是每三个一组,
 以此类推，所以我们可以判断：除了第一组，后面的都应该是三个一组.

 所以有表达式: \d{1,3}(?=(\d{3})+)

 我们来验证一下

 pattern = re.compile(r'\d{1,3}(?=(\d{3})+)')

 match = pattern.sub('\g<0>,','1234567890')

 IN:match
 OUT:'123,456,7,890'

 为什么会这样呢?
 来分析一下:首先\d{1，3}是一个贪婪匹配(就是尽可能多的匹配)，他发现后面有456与他匹配，于是他
 消耗了123，第二次匹配:456发现后面也是可以匹配的,到了7，他发现如果匹配三个则后面就不匹配了,
 匹配两个也不行,只好匹配一个咯,到了最后发现根本就不匹配所以也就不用替换了,所以就原样返回.

 为了验证一下我的分析是正确的,现在来设计一个实验 12345678901 -> 123,456,78,901
 如果结果如上,那么我的分析就是对的.

 pattern = re.compile(r'\d{1,3}(?=(\d{3})+)')

 match = pattern.sub('\g<0>,','12345678901')

 IN:match
 OUT:'123,456,78,901'

 所以我的分析师对的.

 那么该如何解决我们的问题呢？

 既然现在已经知道了sub是如何工作的,那么根据分析,如果让匹配一次成功，也就是通过调整第一组的占位数
 来匹配后面的字符串，那么就可以得到正确的格式,所以最后一个匹配的字符应该是结束符或者非数字.

 有两个模式 (?=$) or (?!\d)

 现在来测试一下:

 pattern = re.compile(r'\d{1,3}(?=(\d{3})+(?!\d))')

 match = pattern.sub('\g<0>,','1234567890')

 IN:match
 OUT:'1,234,567,890'

 pattern = re.coimpile(r'\d{1,3}(?=(\d{3})+(?=$))')

 match = pattern.sub('\g<0>,','1234567890')

 IN:match
 OUT:'1,234,567,890'
-----------------------------------------------------------------------------------
