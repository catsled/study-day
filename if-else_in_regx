 Python中的正则表达式非常强大

 来看一下这个：
 (?(id/name)yes_pattern|no_pattern)

 这个类似于if-else语句
 如果id或者name已经被匹配过了那么将会匹配yes_pattern否则将会匹配no_pattern(可以不要)

----------------------------------------------------------------------------------

 通过一些例子来验证他的用法是否正确:

 pattern = re.compile(r'((\w){3}\.)?(\d|\w)+(?(1)(\.(com|org|edu)))')

 IN:match = re.match(pattern,'www.baidu.com')
    match.group()
 OUT:'www.baidu.com'

 IN:match = re.match(pattern,'baidu.com')
    match.group()
 OUT:'baidu'

 为什么会这样呢？
 因为第一个位置没有得到匹配，所以(?(1))匹配失败，也就直接跳过.

------------------------------------------------------------------------------------
 一些小陷阱...

 例：
 pattern = re.compile(r'(a|b)+')

 match = re.findall(pattern,'abca')

 结果是什么呢?
 以我的想法是['ab','a']
 但是..但是
 结果是['b','a']

 为什么呢？
 经过一些资料的查询后，得到上边的例子会返回匹配到的最后一个字符，而不是连续的字符串.

----------------------------------------------------------------------------------
这时需要这样
pattern = re.compile(r'(?:a|b)+')

IN:match = re.findall(pattern,'abca')
OUT:['ab','a']

(?:...)会匹配所有括号内所有的正则表达式但是不会捕获匹配到的字符.
-----------------------------------------------------------------------------------






